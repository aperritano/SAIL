{"version":3,"sources":["drawController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","drawController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","nodeId","it","drawingTool","load","spyOn","and","callFake","componentState","studentData","drawData","submitCounter","expect","toEqual","setDrawData","toHaveBeenCalled","canvas","getObjects","isEmpty","isCanvasEmpty","id"],"mappings":"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","file":"drawController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('DrawController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let drawController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '6ib04ymmi8',\n      'type': 'Draw',\n      'prompt': 'Draw your favorite thing.',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'stamps': {\n        'Stamps': [\n          'carbon.png',\n          'oxygen.png'\n        ]\n      },\n      'tools': {\n        'select': true,\n        'line': true,\n        'shape': true,\n        'freeHand': true,\n        'text': true,\n        'stamp': true,\n        'strokeColor': true,\n        'fillColor': true,\n        'clone': true,\n        'strokeWidth': true,\n        'sendBack': true,\n        'sendForward': true,\n        'undo': true,\n        'redo': true,\n        'delete': true\n      },\n      'showAddToNotebookButton': true,\n      'background': 'background.png'\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    drawController = $controller('DrawController', { $scope: $scope });\n    drawController.nodeId = 'node1';\n  }));\n\n  it('should set the draw data', () => {\n    drawController.drawingTool = {\n      load: {}\n    };\n    spyOn(drawController.drawingTool, 'load').and.callFake(() => {});\n    const componentState = {\n      studentData: {\n        drawData: '{\"version\":1,\"dt\":{\"width\":800,\"height\":600},\"canvas\":{\"objects\":[{\"type\":\"rect\",\"originX\":\"center\",\"originY\":\"center\",\"left\":365,\"top\":162,\"width\":304,\"height\":162,\"fill\":\"\",\"stroke\":\"#333\",\"strokeWidth\":8,\"strokeDashArray\":null,\"strokeLineCap\":\"butt\",\"strokeLineJoin\":\"miter\",\"strokeMiterLimit\":10,\"scaleX\":1,\"scaleY\":1,\"angle\":0,\"flipX\":false,\"flipY\":false,\"opacity\":1,\"shadow\":null,\"visible\":true,\"clipTo\":null,\"backgroundColor\":\"\",\"fillRule\":\"nonzero\",\"globalCompositeOperation\":\"source-over\",\"transformMatrix\":null,\"skewX\":0,\"skewY\":0,\"rx\":0,\"ry\":0}],\"background\":\"#fff\",\"backgroundImage\":{\"type\":\"image\",\"originX\":\"center\",\"originY\":\"center\",\"left\":400,\"top\":300,\"width\":1200,\"height\":800,\"fill\":\"rgb(0,0,0)\",\"stroke\":null,\"strokeWidth\":0,\"strokeDashArray\":null,\"strokeLineCap\":\"butt\",\"strokeLineJoin\":\"miter\",\"strokeMiterLimit\":10,\"scaleX\":1,\"scaleY\":1,\"angle\":0,\"flipX\":false,\"flipY\":false,\"opacity\":1,\"shadow\":null,\"visible\":true,\"clipTo\":null,\"backgroundColor\":\"\",\"fillRule\":\"nonzero\",\"globalCompositeOperation\":\"source-over\",\"transformMatrix\":null,\"skewX\":0,\"skewY\":0,\"crossOrigin\":\"anonymous\",\"alignX\":\"none\",\"alignY\":\"none\",\"meetOrSlice\":\"meet\",\"lockUniScaling\":false,\"src\":\"http://localhost:8080/curriculum/10/assets/background.jpg\",\"filters\":[],\"resizeFilters\":[]}}}',\n        submitCounter: 2\n      }\n    };\n    expect(drawController.submitCounter).toEqual(0);\n    drawController.setDrawData(componentState);\n    expect(drawController.drawingTool.load).toHaveBeenCalled();\n    expect(drawController.submitCounter).toEqual(2);\n  });\n\n  it('should check that the canvas is empty', () => {\n    drawController.drawingTool = {\n      canvas: {\n        getObjects: {}\n      }\n    };\n    spyOn(drawController.drawingTool.canvas, 'getObjects').and.callFake(() => {\n      return [];\n    });\n    const isEmpty = drawController.isCanvasEmpty();\n    expect(drawController.drawingTool.canvas.getObjects).toHaveBeenCalled();\n    expect(isEmpty).toEqual(true);\n  });\n\n  it('should check that the canvas is not empty', () => {\n    drawController.drawingTool = {\n      canvas: {\n        getObjects: {}\n      }\n    };\n    spyOn(drawController.drawingTool.canvas, 'getObjects').and.callFake(() => {\n      return [{ id: 1 }, { id: 2 }];\n    });\n    const isEmpty = drawController.isCanvasEmpty();\n    expect(drawController.drawingTool.canvas.getObjects).toHaveBeenCalled();\n    expect(isEmpty).toEqual(false);\n  });\n\n});\n"]}