{"version":3,"sources":["discussionController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","discussionController","component","createComponentState","componentStateId","nodeId","componentId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","it","classResponses","level1Responses","getLevel1Responses","expect","length","toEqual"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,sBAAT,EAAiC,YAAM;;AAErC,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,6BAAJ;AACA,MAAIC,kBAAJ;AACA,MAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,0BAAxC,EAAoEC,QAApE,EAAiF;AAC5G,WAAO;AACLC,UAAIL,gBADC;AAELC,cAAQA,MAFH;AAGLC,mBAAaA,WAHR;AAILI,mBAAa;AACXF,kBAAUA,QADC;AAEXD,oCAA4BA;AAFjB;AAJR,KAAP;AASD,GAVD;;AAYAI,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAAiC;AACjDrB,kBAAcoB,aAAd;AACAnB,iBAAaoB,YAAb;AACAjB,gBAAY;AACV,YAAM,YADI;AAEV,cAAQ,YAFE;AAGV,gBAAU,yCAHA;AAIV,wBAAkB,KAJR;AAKV,0BAAoB,KALV;AAMV,oCAA8B,IANpB;AAOV,gCAA0B,IAPhB;AAQV,iCAA2B;AARjB,KAAZ;AAUAF,aAASD,WAAWqB,IAAX,EAAT;AACApB,WAAOqB,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAetB,SAAf,CAAX,CAA1B;AACAD,2BAAuBH,YAAY,sBAAZ,EAAoC,EAAEE,QAAQA,MAAV,EAApC,CAAvB;AACAC,yBAAqBI,MAArB,GAA8B,OAA9B;AACD,GAjBU,CAAX;;AAmBAoB,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAMpB,SAAS,OAAf;AACA,QAAMC,cAAc,YAApB;AACAL,yBAAqByB,cAArB,GAAsC,CACpCvB,qBAAqB,CAArB,EAAwBE,MAAxB,EAAgCC,WAAhC,EAA6C,IAA7C,EAAmD,cAAnD,CADoC,EAEpCH,qBAAqB,CAArB,EAAwBE,MAAxB,EAAgCC,WAAhC,EAA6C,CAA7C,EAAgD,6BAAhD,CAFoC,EAGpCH,qBAAqB,CAArB,EAAwBE,MAAxB,EAAgCC,WAAhC,EAA6C,IAA7C,EAAmD,YAAnD,CAHoC,EAIpCH,qBAAqB,CAArB,EAAwBE,MAAxB,EAAgCC,WAAhC,EAA6C,CAA7C,EAAgD,2BAAhD,CAJoC,CAAtC;AAMA,QAAMqB,kBAAkB1B,qBAAqB2B,kBAArB,EAAxB;AACAC,WAAOF,gBAAgBG,MAAvB,EAA+BC,OAA/B,CAAuC,CAAvC;AACD,GAXD;AAaD,CArDD","file":"discussionController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('DiscussionController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let discussionController;\n  let component;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo, response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '1sc05cn75f',\n      'type': 'Discussion',\n      'prompt': 'What is your favorite ice cream flavor?',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'isStudentAttachmentEnabled': true,\n      'gateClassmateResponses': true,\n      'showAddToNotebookButton': true\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    discussionController = $controller('DiscussionController', { $scope: $scope });\n    discussionController.nodeId = 'node1';\n  }));\n\n  it('should get the level 1 responses', () => {\n    const nodeId = 'node1';\n    const componentId = 'component1';\n    discussionController.classResponses = [\n      createComponentState(1, nodeId, componentId, null, 'Alice Thread'),\n      createComponentState(2, nodeId, componentId, 1, 'Alice reply in Alice Thread'),\n      createComponentState(3, nodeId, componentId, null, 'Bob Thread'),\n      createComponentState(4, nodeId, componentId, 3, 'Alice reply in Bob Thread')\n    ];\n    const level1Responses = discussionController.getLevel1Responses();\n    expect(level1Responses.length).toEqual(2);\n  });\n\n});\n"]}