{"version":3,"sources":["utilService.spec.es6"],"names":["describe","beforeEach","angular","mock","module","mainModule","name","UtilService","inject","_UtilService_","it","generatedKey1","generateKey","generatedKey2","expect","length","toEqual","not","generatedKeysSoFar","i","generatedKey","indexOf","push","convertStringToNumber","toBeNull","array1","copiedArray","makeCopyOfJSONObject","obj","copiedObj","arrayToCheck","arrayHasNonNullElement","myArray","elementToMove","moveObjectUp","moveObjectDown"],"mappings":"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","file":"utilService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('UtilService', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let UtilService;\n\n  beforeEach(inject((_UtilService_) => {\n    UtilService = _UtilService_;\n  }));\n\n  describe('generateKey()', () => {\n    it('should return random keys of length 10 by default', () => {\n      const generatedKey1 = UtilService.generateKey();\n      const generatedKey2 = UtilService.generateKey();\n      expect(generatedKey1.length).toEqual(10);\n      expect(generatedKey2.length).toEqual(10);\n      expect(generatedKey1).not.toEqual(generatedKey2);\n    });\n\n    it('should return random keys of specified length', () => {\n      expect(UtilService.generateKey(5).length).toEqual(5);\n      expect(UtilService.generateKey(23).length).toEqual(23);\n    });\n\n    it('should produce 100 unique random strings', () => {\n      const generatedKeysSoFar = [];\n      for (let i = 0; i < 100; i++) {\n        const generatedKey = UtilService.generateKey();\n        expect(generatedKeysSoFar.indexOf(generatedKey)).toEqual(-1);\n        generatedKeysSoFar.push(generatedKey);\n      }\n    });\n  });\n\n  describe('convertStringToNumber()', () => {\n    it('should convert a number string to a number', () => {\n      expect(UtilService.convertStringToNumber(\"5\")).toEqual(5);\n      expect(UtilService.convertStringToNumber(\"-100\")).toEqual(-100);\n    });\n\n    it('should return null for null argument', () => {\n      expect(UtilService.convertStringToNumber(null)).toBeNull();\n    });\n\n    it('should return non-null number string as is', () => {\n      expect(UtilService.convertStringToNumber(\"abc\")).toEqual(\"abc\");\n      expect(UtilService.convertStringToNumber(\"\")).toEqual(\"\");\n    });\n  })\n\n  describe('makeCopyOfJSONObject()', () => {\n    it('should copy an array object', () => {\n      const array1 = [1, 2, 3];\n      const copiedArray = UtilService.makeCopyOfJSONObject(array1);\n      expect(copiedArray).toEqual(array1);\n    });\n\n    it('should copy an object', () => {\n      const obj = {\"name\":\"WISE\", \"address\":\"Berkeley\"};\n      const copiedObj = UtilService.makeCopyOfJSONObject(obj);\n      expect(copiedObj).toEqual(obj);\n    });\n  });\n\n  describe('arrayHasNonNullElement()', () => {\n    it('should return true if it has at least one non null element', () => {\n      const arrayToCheck = [null, {}, null];\n      expect(UtilService.arrayHasNonNullElement(arrayToCheck)).toEqual(true);\n    });\n\n    it('should return false if it has all null elements', () => {\n      const arrayToCheck = [null, null, null];\n      expect(UtilService.arrayHasNonNullElement(arrayToCheck)).toEqual(false);\n    });\n\n    it('should return true if it has all non null elements', () => {\n      const arrayToCheck = [{}, {}, {}];\n      expect(UtilService.arrayHasNonNullElement(arrayToCheck)).toEqual(true);\n    });\n  });\n\n  describe('moveObjectUp()', () => {\n    it('should move an object up when the object is not the top element', () => {\n      const myArray = [\n        { name: 'a' },\n        { name: 'b' },\n        { name: 'c' }\n      ];\n      const elementToMove = 1;\n      UtilService.moveObjectUp(myArray, elementToMove);\n      expect(myArray[0].name).toEqual('b');\n      expect(myArray[1].name).toEqual('a');\n      expect(myArray[2].name).toEqual('c');\n    });\n\n    it('should not move an object up when the object is the top element', () => {\n      const myArray = [\n        { name: 'a' },\n        { name: 'b' },\n        { name: 'c' }\n      ];\n      const elementToMove = 0;\n      UtilService.moveObjectUp(myArray, elementToMove);\n      expect(myArray[0].name).toEqual('a');\n      expect(myArray[1].name).toEqual('b');\n      expect(myArray[2].name).toEqual('c');\n    });\n  });\n\n  describe('moveObjectDown()', () => {\n    it('should move an object down when the object is not the bottom element', () => {\n      const myArray = [\n        { name: 'a' },\n        { name: 'b' },\n        { name: 'c' }\n      ];\n      const elementToMove = 1;\n      UtilService.moveObjectDown(myArray, elementToMove);\n      expect(myArray[0].name).toEqual('a');\n      expect(myArray[1].name).toEqual('c');\n      expect(myArray[2].name).toEqual('b');\n    });\n\n    it('should not move an object down when the object is the bottom element', () => {\n      const myArray = [\n        { name: 'a' },\n        { name: 'b' },\n        { name: 'c' }\n      ];\n      const elementToMove = 2;\n      UtilService.moveObjectDown(myArray, elementToMove);\n      expect(myArray[0].name).toEqual('a');\n      expect(myArray[1].name).toEqual('b');\n      expect(myArray[2].name).toEqual('c');\n    });\n  });\n});\n"]}